{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to arcK","text":"<p>arcK is a command-line, cross-platform archival tool to preserve data.</p> <p>Thank you for stopping by and taking an interest in this project. This is an exciting project to archive important data to ensure successful recovery. To achieve this, the directory is encoded into 5 parts with 2 extra parts for redundancy, which means you only need 3 parts to restore.</p> <p>This may take longer to do, but file integrity is of the utmost importance and this project ensures that even with 2 missing parts, data can be restored; an excellent use case is to store across multiple cloud storage providers or regional buckets with the same cloud provider. I have stored my personal photos across two S3 regions. Each bucket does not need to have all files, therefore I have stored 3 in one and 3 in another; with one part stored in both (bucket_US: 0,1,2; bucket_EU: 2,3,4). </p> <p>Before:</p> <p></p> <p>After:</p> <p></p> <p>Original data remains intact. A new archive is created. You can specify a different output directory - the above is example only.</p> <p>This is not a backup tool and cannot update the archive with incremental changes.</p> <p>Let's get started: visit the download page.</p>"},{"location":"bugs/","title":"Bugs","text":"<p>It's empty in here. As we discovery bugs they will be reported here.</p>"},{"location":"coding/","title":"Erasure code","text":"<p>Erasure code is a method to preserve data integrity by recovery from damaged parts. </p> <p>Ark uses this code to split archives into 5 parts. The archive can be restored with only 3 of the original parts.</p> <p>Wikipedia: Erasure Code</p>"},{"location":"contact/","title":"Contact","text":"<p>For more information or queries, please email:</p> <p>arck-email24@karlhunter.co.uk</p>"},{"location":"create/","title":"Create","text":""},{"location":"create/#wizard","title":"Wizard","text":"<p>Run the app via command line:</p> <p><code>arck</code></p> <p>Follow on-screen prompts:</p> <ol> <li>Run the app and select option 1.</li> <li>Provide a source directory or file</li> <li>Provide destination directory (leave blank to use the working directory)</li> <li>Give the archive a name.</li> </ol>"},{"location":"create/#command-line","title":"Command Line","text":"<p>Provide a source directory, destination directory and name of archive.</p> <p>The name of the archive denotes the name of the part files. For example, if you choose 'pic24' the files will be named:</p> <ul> <li>pic24.m</li> <li>pic24.0</li> <li>pic24.1</li> <li>pic24.2</li> <li>pic24.3</li> <li>pic24.5</li> </ul> <p><code>arck -s /path/to/source -d /path/to/destination -n name_archive</code></p> <p>Name of archive cannot have equals sign.</p>"},{"location":"create/#backup","title":"Backup","text":"<p>Please ensure you keep additional copies of the metadata file, ending with the .m. You can never have too many copies.</p>"},{"location":"create/#create-technical","title":"Create Technical","text":"<p>Following process is followed during creation:</p> <ol> <li>Checks user specified directory or file exists</li> <li>Checks user specified output directory exists. If not present, working directory used as the default</li> <li>Create temp archive of directory or file</li> <li>Erasure code split temp archive into parts (3 parts with 2 parity)</li> <li>Erasure coding integrity check of existing parts</li> <li>Temp archive deleted</li> <li>Metadata file created for each part</li> </ol>"},{"location":"donate/","title":"Donation","text":"<p>If you find this software useful, and choose to make a donation, I would be grateful. </p> <p>click here to donate. </p>"},{"location":"download/","title":"Downloads","text":""},{"location":"download/#ubuntudebian-based-system-including-linux-mint","title":"Ubuntu/Debian based system (including Linux Mint)","text":"<p>Recommended</p> <ul> <li>Latest deb package</li> <li>Latest binary for Linux amd64</li> <li>Latest binary for Linux arm</li> </ul> <p>Install guide</p>"},{"location":"download/#windows","title":"Windows","text":"<p>Not GUI, needs to be run through command prompt or powershell.</p> <p><code>./arck.exe</code></p> <ul> <li>Latest Windows package</li> </ul>"},{"location":"download/#download-table","title":"Download table","text":""},{"location":"download/#download","title":"Download","text":"<p>Choose the right architecture and operating system.</p> Architecture Linux Windows .deb FreeBSD OpenBSD NetBSD darwin amd64 Download Download Download Download Download Download Download i386 (32-bit) Download Arm64 Download Download Download Download Download Arm6 Download Download"},{"location":"download/#time-to-install","title":"Time to install","text":"<p>Install guide</p>"},{"location":"errors/","title":"Exit Error Codes","text":"Code Description 0 Completed with no errors 1 General input error; read message given during exit 2 Encode error 3 Archive error (encoding) 5 Hash fail find file 6 Metadata error 7 Reconstruction error 8 Metadata load error 9 Unable to reconstruct due to checksum errors 10 Extraction of file"},{"location":"install/","title":"Install","text":""},{"location":"install/#deb-package","title":"Deb package","text":"<p>Recommended methods for debian/ubuntu distros.</p> <p>Download the compiled binary package.</p> <p>From a graphical interface, right-click and choose Install</p> <p>From command line, type:</p> <p><code>dpkg --install arck.deb</code></p>"},{"location":"install/#binary","title":"Binary","text":"<p>Before you can use the binary, you need to make it executable. Use command:</p> <p><code>chmod +x arck</code></p> <p>Then, copy to bin directory:</p> <p><code>cp -a arck /usr/local/bin</code></p> <p>Test this worked:</p> <p><code>arck</code></p> <p>You should be greeted with the wizard.</p>"},{"location":"license/","title":"MIT License","text":"<p>Copyright (c) 2024 Karl Hunter</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"metadata/","title":"Metadata File","text":""},{"location":"metadata/#about","title":"About","text":"<p>The metadata file is important and must be backed up and also stored alongside the parts too. In a nutshell, keep many copies of this file -- it makes restoring easier.</p> <p>The file contains the checksum values of each part. This is important because if you feed the erasure coding module with a damaged part, it could result in failure to reconstruct the archive. If a part fails, arcK will automatically delete the damaged part - afterall, it's useless now. But remember, you can restore the archive with just 3 parts. </p>"},{"location":"metadata/#fixing-damanged-or-lost-metadata-file","title":"Fixing damanged or lost metadata file","text":"<p>If you need to recreate the metadata file, generate sha256 checksum of each part and store in the metadata file on one line. This can be in any order. Nb. End the line with a semi-colon.</p> <p><code>archive_name.0=sha256hash;archive_name.1=sha256hash; ...</code></p> <p>Name the file with the same name of the parts. For example, if the archive parts are called 'pictures.X' then name the metadata file 'pictures.m'</p> <p>If you are not confident of the integrity of the parts, then use 'skip'. For example:</p> <p><code>archive_name.0=936a185caaa266bb9cbe981e9e05cb78cd732b0b3280eb944412bb6f8f8f07af;archive_name.1=skip; ...</code></p> <p>This will ensure the program continues without giving you an error, then the erasure coding module will attempt to check the archive parts integrity. This may fail, as giving this module bad data may result in failure to restore; hence why the metadata file is of utmost importance In this case, try renaming each part and then see if the restoration works until you find the bad part. There may be more than one bad part, which makes this process complex. </p>"},{"location":"release/","title":"Release Notes","text":""},{"location":"release/#113","title":"1.1.3","text":"<p>01 Jan 2025</p> <ul> <li>No new features; new year bump</li> </ul>"},{"location":"release/#112","title":"1.1.2","text":"<p>27 Oct 2024</p> <ul> <li>Added skip flag (skips verification checks during restore)</li> <li>Improved a few info messages and error messages during restore should failure occur</li> </ul>"},{"location":"release/#111","title":"1.1.1","text":"<p>19 Oct 2024</p> <ul> <li>Fixed deb package. Conflicting package called ark already exists. Change to arck</li> <li>Changed project name, arcK</li> </ul>"},{"location":"release/#110","title":"1.1.0","text":"<p>13 Oct 2024</p> <ul> <li>New wizard</li> <li>Minor tweaks and fixes</li> </ul>"},{"location":"release/#100","title":"1.0.0","text":"<p>12 Oct 2024</p> <p>Welcome to the first release of ark. We hope you find it useful.</p>"},{"location":"restore/","title":"Restore","text":""},{"location":"restore/#wizard","title":"Wizard","text":"<p>Run the app via command line:</p> <p><code>arck</code></p> <p>Choose option 3</p> <p><code>3. Restore an archive</code></p> <p>Provide path to the metadata file (the file ending in .m)</p> <p>Ensure the metadata file is in the same directory with the part files</p> <p>If you do not give an output directory, the default will be used: current working directory.</p> <p>The directory/file will be restored to original state.</p>"},{"location":"restore/#command-line","title":"Command Line","text":"<p><code>arck -x /path/to/file.m -d /path/to/restore/</code></p> <p>Supported flags:</p> <ul> <li><code>--skip</code></li> </ul>"},{"location":"restore/#extract-technical","title":"Extract Technical","text":"<p>Following process is followed during extraction:</p> <ol> <li>Checks metadata file exists (if metadata file missing, (read this)[metadata.md])</li> <li>Checks user-defined output directory exists. If not specify, working directory used as default</li> <li>Checks checksums of parts against metadata file</li> <li>Deletes any damaged parts - these are now useless and can cause issues restoring</li> <li>Erasure coding integrity checks</li> <li>Combination of parts</li> <li>Temp archive created by extracting parts, which is extracted then deleted</li> </ol> <p>Directory structure restored.</p>"},{"location":"start/","title":"Getting Started","text":""},{"location":"start/#quick-start","title":"Quick Start","text":""},{"location":"start/#install","title":"Install","text":"<p>It's easy to get started. Frist, download and run or install the pre-built binary. </p> <p>Test installation has worked. Run:</p> <p><code>arck</code></p> <p>This will start the wizard. If you have not installed into your bin directory, CD to directory and run:</p> <p><code>.\\arck</code></p> <p>You will be prompted to choose operating mode, which are as follows:</p> <ol> <li>Create a new archive from a directory or file</li> <li>Verify an existing archive (point to .m file)</li> <li>Restore an archive</li> <li>About this app</li> <li>Exit</li> </ol> <p>Either use the wizard (called by <code>arck</code>), or via single command as below. </p>"},{"location":"start/#create-first-archive","title":"Create first archive","text":""},{"location":"start/#wizard","title":"Wizard","text":"<p>Simply follow the on-screen prompts:</p> <ol> <li>Run the app and select option 1.</li> <li>Provide a source directory or file</li> <li>Provide destination directory (leave blank to use the working directory)</li> <li>Give the archive a name.</li> </ol>"},{"location":"start/#command-line","title":"Command line","text":"<p>To create an archive, simply run:</p> <p><code>arck -s /path/to/source/ -d /output/dir/ -n archive_name</code></p> <p>And to restore (extract) the archive:</p> <p><code>arck -x /output/dir/archive_name.m -d /path/to/source</code></p> <p>more</p>"},{"location":"tech/","title":"Technical Manual","text":"<ul> <li>Create</li> <li>Restore</li> <li>Metadata File</li> <li>Erasure Coding</li> <li>Exit Error Codes</li> </ul>"},{"location":"usage/","title":"CLI Usage","text":"<p>arck {-s -d -n | -v | -x -d}</p> Flag Description -s Source directory used for creating the archive -d Target directory used to output archive. If not specified, working directory will be used instead -n Specify the name of the archive. Must be given when creating archive -v Verifies integrity of part files. Specify metadata file to test archives -x Restore archive. Specify path to metadata file"},{"location":"usage/#create-archive","title":"Create archive","text":"<p>You can specify a directory (recommended) or file. You do not need to tar archive a directory yourself. </p> <p><code>arck -s /path/to/source/ -d /path/to/outputdir/ -n archive_name</code></p> <p>You cannot create archive names with an equals (=) sign. If you want to use a space remember to enclose in perensese: <code>-n \"name of archive\"</code></p> <p>Nb: the output directory must have double the available space to match the source directory. After processing, the space requirement will the same as the source directory.</p> <p>How this works.</p>"},{"location":"usage/#verify-archive","title":"Verify archive","text":"<p>A useful feature is to verify the integrity of the archive parts. Testing backups are an important aspect of data preservation. Verifying is a faster method to test parts integrity without restoring the archive.</p> <p><code>arck -v /path/to/archive.m</code></p> <p>You will need to specify the archive metadata file. As a reminder, you should keep this backed up and ideally keep multiple copies. More on the (metadata file)[metadata.md].</p> <p>You will be given an output like:</p> <p><code>project.0  PASS project.1  PASS project.2  PASS project.3  PASS project.4  PASS</code></p> <p>If there are any failed parts, the output will read:</p> <p><code>project.3  FAIL</code></p> <p>In this case, consider restoring broken part from backup and re-testing. There are no methods to fix broken parts, but if there are enough \"working\" parts, you can restore. To restore, there needs to be 3 of the 5 parts undamaged. </p>"},{"location":"usage/#restore","title":"Restore","text":"<p>Before you restore, ensure metadate file is located with parts. Example, metadata file named [archive_name].m</p> <p>File structure:</p> <p><code>archive.m archive.0 archive.1 archive.2 archive.3 archive.4</code></p> <p>You can still restore if parts are missing. Let the program handle this. </p> <p><code>arck -x /path/to/metadata_file.m -d /path/to/outputdir/</code></p> <p>How this works.</p>"}]}