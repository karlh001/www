{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the home of DEFIANT-FG About DEFIANT-FG is a powerful, light-weight, open source, command line tool to monitor for corruption, changes or missing files in a directory structure. It's your ideal companion to monitor cold backups and archival data on external media. Plug your external hard drive in periodically and test that the data the drive is giving you is correct. Helps detect bitrot and early signs of media failure. Download Links For releases visit this page . Available builds Linux 64bit Arm 64 bit For installation instructions click here . Open Source The source code is located on my GitHub repository.","title":"Home"},{"location":"#welcome-to-the-home-of-defiant-fg","text":"","title":"Welcome to the home of DEFIANT-FG"},{"location":"#about","text":"DEFIANT-FG is a powerful, light-weight, open source, command line tool to monitor for corruption, changes or missing files in a directory structure. It's your ideal companion to monitor cold backups and archival data on external media. Plug your external hard drive in periodically and test that the data the drive is giving you is correct. Helps detect bitrot and early signs of media failure.","title":"About"},{"location":"#download-links","text":"For releases visit this page . Available builds Linux 64bit Arm 64 bit For installation instructions click here .","title":"Download Links"},{"location":"#open-source","text":"The source code is located on my GitHub repository.","title":"Open Source"},{"location":"about/","text":"About DEFIANT-FG is a powerful, light-weight, open source, command line tool to monitor for corruption, changes or missing files in a directory structure written in Go. Algorithm Files are hashed using SHA-256. Next Download Installation","title":"About"},{"location":"about/#about","text":"DEFIANT-FG is a powerful, light-weight, open source, command line tool to monitor for corruption, changes or missing files in a directory structure written in Go.","title":"About"},{"location":"about/#algorithm","text":"Files are hashed using SHA-256.","title":"Algorithm"},{"location":"about/#next","text":"Download Installation","title":"Next"},{"location":"bugs/","text":"Report Bugs Thank you for taking the time to help improve this application. If you have a GitHub account, report bugs here . If you prefer, email me. Thank you","title":"Bugs"},{"location":"bugs/#report-bugs","text":"Thank you for taking the time to help improve this application. If you have a GitHub account, report bugs here . If you prefer, email me. Thank you","title":"Report Bugs"},{"location":"build/","text":"Build From Source To build source to binary download and install Golang. On debian-based distros try: sudo apt install golang-go Once set-up CD to the source code directory. cd ~/Downloads/src Run the build command: go build -o dfg.bin . You will have a complied application named dfg.bin . Run a command to test it worked: ./dfg.bin -version If this works, copy to your system bin cp dfg.bin /usr/bin/dfg Try the run command without the .bin extension dfg -version If this works everything has been successful.","title":"Build From Source"},{"location":"build/#build-from-source","text":"To build source to binary download and install Golang. On debian-based distros try: sudo apt install golang-go Once set-up CD to the source code directory. cd ~/Downloads/src Run the build command: go build -o dfg.bin . You will have a complied application named dfg.bin . Run a command to test it worked: ./dfg.bin -version If this works, copy to your system bin cp dfg.bin /usr/bin/dfg Try the run command without the .bin extension dfg -version If this works everything has been successful.","title":"Build From Source"},{"location":"contact/","text":"Contact Email dfg@karlhunter.co.uk GitHub https://github.com/karlh001","title":"Contact"},{"location":"contact/#contact","text":"","title":"Contact"},{"location":"contact/#email","text":"dfg@karlhunter.co.uk","title":"Email"},{"location":"contact/#github","text":"https://github.com/karlh001","title":"GitHub"},{"location":"credits/","text":"Credits Written in Golang Used SQLite module by Mattn This manual generated using Mkdocs GitHub for hosting Manual pages wirtten using Apostrophe","title":"Credits"},{"location":"credits/#credits","text":"Written in Golang Used SQLite module by Mattn This manual generated using Mkdocs GitHub for hosting Manual pages wirtten using Apostrophe","title":"Credits"},{"location":"db/","text":"Database About DEFIANT-FG stores your file hashes into a database (db) file named dfg.db . It's formatted to SQLite. Location The db file is stored in the root of the given directory; for example, if you run on /mnt/usb/Pictures the db file will be located /mnt/usb/Pictures/dfg.db . Any sub folders will be included in the hash database. Portability You are encouraged to keep a back-up of the database file. As long as you restore to the root of the original directory it will work, even though the full path changes. For example, you can move the Pictures to: /mnt/usb2/Pictures ; in fact, the picture folder name can be changed too. Structure dfg.db objects [table] ID_objects [column] (auto increment) path [column] (subfolder1/filename) hash [column] (SHA-256) ts (time stamp) [column] (YYYYMMDDHHMMSS) enabled [column] default 1","title":"Database"},{"location":"db/#database","text":"","title":"Database"},{"location":"db/#about","text":"DEFIANT-FG stores your file hashes into a database (db) file named dfg.db . It's formatted to SQLite.","title":"About"},{"location":"db/#location","text":"The db file is stored in the root of the given directory; for example, if you run on /mnt/usb/Pictures the db file will be located /mnt/usb/Pictures/dfg.db . Any sub folders will be included in the hash database.","title":"Location"},{"location":"db/#portability","text":"You are encouraged to keep a back-up of the database file. As long as you restore to the root of the original directory it will work, even though the full path changes. For example, you can move the Pictures to: /mnt/usb2/Pictures ; in fact, the picture folder name can be changed too.","title":"Portability"},{"location":"db/#structure","text":"dfg.db objects [table] ID_objects [column] (auto increment) path [column] (subfolder1/filename) hash [column] (SHA-256) ts (time stamp) [column] (YYYYMMDDHHMMSS) enabled [column] default 1","title":"Structure"},{"location":"download/","text":"Download Visit the release site","title":"Download"},{"location":"download/#download","text":"Visit the release site","title":"Download"},{"location":"errors/","text":"Errors Common errors and what they mean. Database error: could not create database file. Can I write to this directory? As it states, is the directory you are scanning read only? FG needs access to write the database file. error: Could not open db Does FG have read and write acces to the db? If that's the case, db may be damaged. Return a back-up copy. fatal: SQL query error Although FG was able to open the database, it could not query the rows. This is bad. Likely damaged database file - restore from backup and try again. Hash error: failed hash on /path/to/file.JPG This is what FG was designed to do. This messages means the file has been altered or became damaged. Restore the file from back and run the scan again. File System Fatal: directory does not exist You provided a location that is not a directory. Check your input. missing: /path/to/file.PNG The file is no longer present. It may have been deleted, moved or renamed. If you moved or renamed, the old file meta data will persist in the database.","title":"Errors"},{"location":"errors/#errors","text":"Common errors and what they mean.","title":"Errors"},{"location":"errors/#database","text":"error: could not create database file. Can I write to this directory? As it states, is the directory you are scanning read only? FG needs access to write the database file. error: Could not open db Does FG have read and write acces to the db? If that's the case, db may be damaged. Return a back-up copy. fatal: SQL query error Although FG was able to open the database, it could not query the rows. This is bad. Likely damaged database file - restore from backup and try again.","title":"Database"},{"location":"errors/#hash","text":"error: failed hash on /path/to/file.JPG This is what FG was designed to do. This messages means the file has been altered or became damaged. Restore the file from back and run the scan again.","title":"Hash"},{"location":"errors/#file-system","text":"Fatal: directory does not exist You provided a location that is not a directory. Check your input. missing: /path/to/file.PNG The file is no longer present. It may have been deleted, moved or renamed. If you moved or renamed, the old file meta data will persist in the database.","title":"File System"},{"location":"flags/","text":"Flags Directory -d /path/to/dir/ Choose directory to scan. For example: dfg -d /mnt/usb/pictures/ Skip -s Skip any messages after executing application. Useful for scripting. Will skip confirmation message to create new database file dfg -s -d /mnt/usb/pictures/ Version -version Outputs version of the application","title":"Flags"},{"location":"flags/#flags","text":"","title":"Flags"},{"location":"flags/#directory","text":"-d /path/to/dir/ Choose directory to scan. For example: dfg -d /mnt/usb/pictures/","title":"Directory"},{"location":"flags/#skip","text":"-s Skip any messages after executing application. Useful for scripting. Will skip confirmation message to create new database file dfg -s -d /mnt/usb/pictures/","title":"Skip"},{"location":"flags/#version","text":"-version Outputs version of the application","title":"Version"},{"location":"installation/","text":"Installation On Linux For automatic installation on Linux, extract the archive (dfg_linux_stable.tar) and run install.sh as root. Alternatively, install manually: cd ~/Downloads wget http://karlhunter.co.uk/defiant/downloads/ dfg_linux_stable.tar tar -XYZ dfg_linux.tar cp As standalone executable, extract the contents and copy dfg.bin anywhere you desire. Make executable with command: chmod +x dfg.bin And run: ./dfg.bin Next Run","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#on-linux","text":"For automatic installation on Linux, extract the archive (dfg_linux_stable.tar) and run install.sh as root. Alternatively, install manually: cd ~/Downloads wget http://karlhunter.co.uk/defiant/downloads/ dfg_linux_stable.tar tar -XYZ dfg_linux.tar cp As standalone executable, extract the contents and copy dfg.bin anywhere you desire. Make executable with command: chmod +x dfg.bin And run: ./dfg.bin","title":"On Linux"},{"location":"installation/#next","text":"Run","title":"Next"},{"location":"release_notes_1/","text":"Release Notes Version 1.0.1 2023-11-24 Minor typos fixes README typos fixed Fixed email address in about on application Built using earliest support Ubuntu LTS for compatibility Version 1.0 2023-11-23 Initial public release. Features Scan directory Hash files and store in database Check for missing files Dependency versions mattn sqlite3 driver 1.14.16","title":"Release Notes 1.x"},{"location":"release_notes_1/#release-notes","text":"","title":"Release Notes"},{"location":"release_notes_1/#version-101","text":"2023-11-24 Minor typos fixes README typos fixed Fixed email address in about on application Built using earliest support Ubuntu LTS for compatibility","title":"Version 1.0.1"},{"location":"release_notes_1/#version-10","text":"2023-11-23 Initial public release. Features Scan directory Hash files and store in database Check for missing files Dependency versions mattn sqlite3 driver 1.14.16","title":"Version 1.0"},{"location":"requirements/","text":"Requirements I build the most recent long-term support of Ubuntu so ensure later operating system compatibility. Build on Ubuntu Server Ubuntu 20.04.6 LTS Tested on: Linux Mint 21.2 Ubuntu LTS 20.04.6 Build To build on your system, follow the build guide","title":"Requirements"},{"location":"requirements/#requirements","text":"I build the most recent long-term support of Ubuntu so ensure later operating system compatibility. Build on Ubuntu Server Ubuntu 20.04.6 LTS Tested on: Linux Mint 21.2 Ubuntu LTS 20.04.6","title":"Requirements"},{"location":"requirements/#build","text":"To build on your system, follow the build guide","title":"Build"},{"location":"run/","text":"Run To use FG, feed dfg with a directory to work with using the -d flag: dfg -d /path/to/dir/ If this is the first time you have scanned a directory you will be asked to confirm. This is to ensure you have not accidentally typed an incorrect address. To confirm, type y and press enter (to skip visit flags section). If a new database is created you will see: info: database file created The scan will begin. To cancel, hold down the Ctrl key and press C (Ctl+C). When the scan is complete you will get an confirmation: For errors that may occur, read the error page . What is happening? During the scan, FG will cycle through the directory and sub-directories. When it finds a file the following occurs: Is the object a file? (i.e. do not process a directory) Is this file in the database already? (does FG know about it, could be a new file) If yes, calculates the file's hash then compares against the database. If no match, reports to user: \"error: failed file hash\" If no, calculates the file's hash and adds to a queue to write to db later After this process has finished, FG will then cycle through the database to check for missing files. Is the file a file Is the file present If yes, continues with scan if no, reports to user \"error: file missing\" The scan will complete. If this is the first time you are running a scan, and have thousands of files, it may take a few hours to write to the database. Further scans on the same directory will work much faster.","title":"Run"},{"location":"run/#run","text":"To use FG, feed dfg with a directory to work with using the -d flag: dfg -d /path/to/dir/ If this is the first time you have scanned a directory you will be asked to confirm. This is to ensure you have not accidentally typed an incorrect address. To confirm, type y and press enter (to skip visit flags section). If a new database is created you will see: info: database file created The scan will begin. To cancel, hold down the Ctrl key and press C (Ctl+C). When the scan is complete you will get an confirmation: For errors that may occur, read the error page .","title":"Run"},{"location":"run/#what-is-happening","text":"During the scan, FG will cycle through the directory and sub-directories. When it finds a file the following occurs: Is the object a file? (i.e. do not process a directory) Is this file in the database already? (does FG know about it, could be a new file) If yes, calculates the file's hash then compares against the database. If no match, reports to user: \"error: failed file hash\" If no, calculates the file's hash and adds to a queue to write to db later After this process has finished, FG will then cycle through the database to check for missing files. Is the file a file Is the file present If yes, continues with scan if no, reports to user \"error: file missing\" The scan will complete. If this is the first time you are running a scan, and have thousands of files, it may take a few hours to write to the database. Further scans on the same directory will work much faster.","title":"What is happening?"}]}