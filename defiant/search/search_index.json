{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome About DEFIANT-FG is a powerful, light-weight, command line tool to monitor for corruption, changes or missing files in a directory structure. It's your ideal companion to monitor cold backups and archival data on external media. Plug your external hard drive in periodically and test that the data the drive is giving you is correct. Helps detect bitrot and early signs of media failure. Download Links For releases visit this page . Deb Installer Windows More Hashes SHA256 MD5 Whirlpool","title":"Home"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#about","text":"DEFIANT-FG is a powerful, light-weight, command line tool to monitor for corruption, changes or missing files in a directory structure. It's your ideal companion to monitor cold backups and archival data on external media. Plug your external hard drive in periodically and test that the data the drive is giving you is correct. Helps detect bitrot and early signs of media failure.","title":"About"},{"location":"#download-links","text":"For releases visit this page . Deb Installer Windows More","title":"Download Links"},{"location":"#hashes","text":"SHA256 MD5 Whirlpool","title":"Hashes"},{"location":"about/","text":"About DEFIANT-FG is a powerful, light-weight, command line tool to monitor for corruption, changes or missing files in a directory structure written in Go. Algorithm Files are hashed using SHA-256. Next Download Installation","title":"About"},{"location":"about/#about","text":"DEFIANT-FG is a powerful, light-weight, command line tool to monitor for corruption, changes or missing files in a directory structure written in Go.","title":"About"},{"location":"about/#algorithm","text":"Files are hashed using SHA-256.","title":"Algorithm"},{"location":"about/#next","text":"Download Installation","title":"Next"},{"location":"bugs/","text":"Report Bugs Thank you for taking the time to help improve this application. If you have a GitHub account, report bugs here . If you prefer, email me. Thank you","title":"Bugs"},{"location":"bugs/#report-bugs","text":"Thank you for taking the time to help improve this application. If you have a GitHub account, report bugs here . If you prefer, email me. Thank you","title":"Report Bugs"},{"location":"build/","text":"Build From Source To build source code into a binary you need to download and install Golang. On debian-based distros try: sudo apt install golang-go Once set-up change directory to the source code directory. cd ~/Downloads/XYZ/src Run the build command: go build -o dfg.bin . During the build, Go will download dependencies. You will have a complied application named dfg.bin . Run a command to test it worked: ./dfg.bin -version If this works, copy to your system bin cp dfg.bin /usr/bin/dfg Try the run command without the .bin extension dfg -version If this works everything has been successful.","title":"Build From Source"},{"location":"build/#build-from-source","text":"To build source code into a binary you need to download and install Golang. On debian-based distros try: sudo apt install golang-go Once set-up change directory to the source code directory. cd ~/Downloads/XYZ/src Run the build command: go build -o dfg.bin . During the build, Go will download dependencies. You will have a complied application named dfg.bin . Run a command to test it worked: ./dfg.bin -version If this works, copy to your system bin cp dfg.bin /usr/bin/dfg Try the run command without the .bin extension dfg -version If this works everything has been successful.","title":"Build From Source"},{"location":"contact/","text":"Contact Email dfg@karlhunter.co.uk","title":"Contact"},{"location":"contact/#contact","text":"","title":"Contact"},{"location":"contact/#email","text":"dfg@karlhunter.co.uk","title":"Email"},{"location":"credits/","text":"Credits Written in Golang Used SQLite module by Mattn This manual generated using Mkdocs GitHub for hosting Manual pages wirtten using Apostrophe","title":"Credits"},{"location":"credits/#credits","text":"Written in Golang Used SQLite module by Mattn This manual generated using Mkdocs GitHub for hosting Manual pages wirtten using Apostrophe","title":"Credits"},{"location":"db/","text":"Database About DEFIANT-FG stores your file hashes into a database (db) file named dfg.db . It's formatted to SQLite. Location By default, db file is stored in the root of the given directory; for example, if you run on /mnt/usb/Pictures the db file will be located /mnt/usb/Pictures/dfg.db . Any sub folders will be included in the hash database. You can specify your own db location with name of the database file. To do this, use the -db flag, example: dfg -db /path/to/db.sql -d /path/to/files/ Portability You are encouraged to keep a back-up of the database file. As long as you restore to the root of the original directory (or specify the exact location) it will work, even though the full path changes. For example, you can move the Pictures to: /mnt/usb2/Pictures ; in fact, the picture directory name can be changed too. Structure dfg.db objects [table] ID_objects [column] (auto increment) path [column] (subfolder1/filename) hash [column] (SHA-256) ts (time stamp) [column] (YYYYMMDDHHMMSS) enabled [column] default 1 File Name Limitations The database will not accept an apostrophes or <! in the filename; if present in a file name, these will be replaced with a tag before storing in the database. The apostrophe will become xAPOSx and the less than bracket <! will become xBRACKx . Remove Entries as of version 1.3 If you have removed an object and no longer wish it to remain in the database, you can remove it using follow commands. First, you will need to determine the database ID. This will be printed in a log or terminal output after a scan: 2024/03/02 16:19:46 missing: /Interesting_Document.pdf ID: 919 Copy / note the ID of the missing object, in this case 919. dfg -data del -db /path/to/dfg.db The database tool will ask for ID of record to delete; this is this ID given in terminal output or log file, in this example it's 919. Database tool using the following database: /path/to/dfg.db Type ID of record to delete: 919 File entry to delete: /Interesting_Document.pdf Correct? [y/n] y Delete request completed The entry will remain in the database but will be disabled, which will not reduce size of the database file. Future releases will have a clean-up feature. Find Duplicates This will search database file for duplicated files with the same hashes. The command will return occurrences (2) and name of one of the files. dfg -data same -db /path/to/dfg.db You must specify database file. Example output: (2) /pictures/photo1.jpg","title":"Database"},{"location":"db/#database","text":"","title":"Database"},{"location":"db/#about","text":"DEFIANT-FG stores your file hashes into a database (db) file named dfg.db . It's formatted to SQLite.","title":"About"},{"location":"db/#location","text":"By default, db file is stored in the root of the given directory; for example, if you run on /mnt/usb/Pictures the db file will be located /mnt/usb/Pictures/dfg.db . Any sub folders will be included in the hash database. You can specify your own db location with name of the database file. To do this, use the -db flag, example: dfg -db /path/to/db.sql -d /path/to/files/","title":"Location"},{"location":"db/#portability","text":"You are encouraged to keep a back-up of the database file. As long as you restore to the root of the original directory (or specify the exact location) it will work, even though the full path changes. For example, you can move the Pictures to: /mnt/usb2/Pictures ; in fact, the picture directory name can be changed too.","title":"Portability"},{"location":"db/#structure","text":"dfg.db objects [table] ID_objects [column] (auto increment) path [column] (subfolder1/filename) hash [column] (SHA-256) ts (time stamp) [column] (YYYYMMDDHHMMSS) enabled [column] default 1","title":"Structure"},{"location":"db/#file-name-limitations","text":"The database will not accept an apostrophes or <! in the filename; if present in a file name, these will be replaced with a tag before storing in the database. The apostrophe will become xAPOSx and the less than bracket <! will become xBRACKx .","title":"File Name Limitations"},{"location":"db/#remove-entries","text":"as of version 1.3 If you have removed an object and no longer wish it to remain in the database, you can remove it using follow commands. First, you will need to determine the database ID. This will be printed in a log or terminal output after a scan: 2024/03/02 16:19:46 missing: /Interesting_Document.pdf ID: 919 Copy / note the ID of the missing object, in this case 919. dfg -data del -db /path/to/dfg.db The database tool will ask for ID of record to delete; this is this ID given in terminal output or log file, in this example it's 919. Database tool using the following database: /path/to/dfg.db Type ID of record to delete: 919 File entry to delete: /Interesting_Document.pdf Correct? [y/n] y Delete request completed The entry will remain in the database but will be disabled, which will not reduce size of the database file. Future releases will have a clean-up feature.","title":"Remove Entries"},{"location":"db/#find-duplicates","text":"This will search database file for duplicated files with the same hashes. The command will return occurrences (2) and name of one of the files. dfg -data same -db /path/to/dfg.db You must specify database file. Example output: (2) /pictures/photo1.jpg","title":"Find Duplicates"},{"location":"donate/","text":"Donate Please help with the development of this tool by donating. If you find this tool useful, donations help to continue development. You can buy me a coffee Or donate via PayPal Thank you!","title":"Donate"},{"location":"donate/#donate","text":"Please help with the development of this tool by donating. If you find this tool useful, donations help to continue development. You can buy me a coffee Or donate via PayPal Thank you!","title":"Donate"},{"location":"download/","text":"Download Choose the right architecture and operating system. Architecture Linux Windows .deb FreeBSD OpenBSD NetBSD darwin amd64 Download Download Download Download Download Download Download i386 (32-bit) Download Arm64 Download Download Download Download Download Arm6 Download Download","title":"Download"},{"location":"download/#download","text":"Choose the right architecture and operating system. Architecture Linux Windows .deb FreeBSD OpenBSD NetBSD darwin amd64 Download Download Download Download Download Download Download i386 (32-bit) Download Arm64 Download Download Download Download Download Arm6 Download Download","title":"Download"},{"location":"errors/","text":"Errors Common errors and what they mean. Database error: could not create database file. Can I write to this directory? As it states, is the directory you are scanning read only? FG needs access to write the database file. error: Could not open db Does FG have read and write acces to the db? If that's the case, db may be damaged. Return a back-up copy. fatal: SQL query error Although FG was able to open the database, it could not query the rows. This is bad. Likely damaged database file - restore from backup and try again. Hash fail: /path/to/file.JPG This is what FG was designed to do. This messages means the file has been altered or became damaged. Restore the file from backup and run the scan again. Previous prior to 1.2.3 will report failed hash as below: error: failed hash on /path/to/file.JPG File System Fatal: directory does not exist You provided a location that is not a directory. Check your input. missing: /path/to/file.PNG The file is no longer present. It may have been deleted, moved or renamed. If you moved or renamed, the old file meta data will persist in the database. Logging error: Could not create log file FG was not able to write to the directory. /path/to/files/dfg.log","title":"Errors"},{"location":"errors/#errors","text":"Common errors and what they mean.","title":"Errors"},{"location":"errors/#database","text":"error: could not create database file. Can I write to this directory? As it states, is the directory you are scanning read only? FG needs access to write the database file. error: Could not open db Does FG have read and write acces to the db? If that's the case, db may be damaged. Return a back-up copy. fatal: SQL query error Although FG was able to open the database, it could not query the rows. This is bad. Likely damaged database file - restore from backup and try again.","title":"Database"},{"location":"errors/#hash","text":"fail: /path/to/file.JPG This is what FG was designed to do. This messages means the file has been altered or became damaged. Restore the file from backup and run the scan again. Previous prior to 1.2.3 will report failed hash as below: error: failed hash on /path/to/file.JPG","title":"Hash"},{"location":"errors/#file-system","text":"Fatal: directory does not exist You provided a location that is not a directory. Check your input. missing: /path/to/file.PNG The file is no longer present. It may have been deleted, moved or renamed. If you moved or renamed, the old file meta data will persist in the database.","title":"File System"},{"location":"errors/#logging","text":"error: Could not create log file FG was not able to write to the directory. /path/to/files/dfg.log","title":"Logging"},{"location":"flags/","text":"Flags Directory -d /path/to/dir/ Choose directory to scan. For example: dfg -d /mnt/usb/pictures/ For documentation consistency, I always put the path flag at the end of the command, but this is not necessary. Skip -s Skip any messages after executing application. Useful for scripting. Will skip confirmation message to create new database file dfg -s -d /mnt/usb/pictures/ Skip info messages -e Only shows errors such as failed hashes and missing files. Does not show any info prompts during the scan. Note: will also not show a line for new files. Logging -l Add the l flag to output to a log file. Your terminal will no longer show verbose. More on the log file . -log Specify the location of the log file. Log entries append to previous log lines (log files do not overwrite). Example: dfg -l -log /var/log/pictures.log -d /mnt/usb/pictures/ Block Size The default block size used to hash files is 64 MB. You can specify a custom block size, in MB. -b 64 Changing the block size does not affect existing hashes already saved in the database Skip missing file scan --skip-missing Skips the missing file scan. You will not be notified about missing / deleted files which exist in the database. Check for missing only m Runs a missing files only scan. Does not look for new files or checksums existing files. Cannot be used in conjunction with the --skip-missing flag. dfg -d /path/to/files -m Read only mode -ro Runs a scan without modifying the dfg.db or specified database file. If new files are found, they will not be written to the dfg.db file. Good option for testing archival data. dfg -d /path/to/file -ro Debug -debug Shows debugging messages. Detailed error messages are printed. dfg -d /path/to/files/ -debug Database file location -db You can specify your own db location with name of the database file. To do this, use the -db flag, example: dfg -db /path/to/db.sql -d /path/to/files/ Ensure you specify the database name, not just the directory path. More on database . Version -version Outputs version of the application","title":"Flags"},{"location":"flags/#flags","text":"","title":"Flags"},{"location":"flags/#directory","text":"-d /path/to/dir/ Choose directory to scan. For example: dfg -d /mnt/usb/pictures/ For documentation consistency, I always put the path flag at the end of the command, but this is not necessary.","title":"Directory"},{"location":"flags/#skip","text":"-s Skip any messages after executing application. Useful for scripting. Will skip confirmation message to create new database file dfg -s -d /mnt/usb/pictures/","title":"Skip"},{"location":"flags/#skip-info-messages","text":"-e Only shows errors such as failed hashes and missing files. Does not show any info prompts during the scan. Note: will also not show a line for new files.","title":"Skip info messages"},{"location":"flags/#logging","text":"-l Add the l flag to output to a log file. Your terminal will no longer show verbose. More on the log file . -log Specify the location of the log file. Log entries append to previous log lines (log files do not overwrite). Example: dfg -l -log /var/log/pictures.log -d /mnt/usb/pictures/","title":"Logging"},{"location":"flags/#block-size","text":"The default block size used to hash files is 64 MB. You can specify a custom block size, in MB. -b 64 Changing the block size does not affect existing hashes already saved in the database","title":"Block Size"},{"location":"flags/#skip-missing-file-scan","text":"--skip-missing Skips the missing file scan. You will not be notified about missing / deleted files which exist in the database.","title":"Skip missing file scan"},{"location":"flags/#check-for-missing-only","text":"m Runs a missing files only scan. Does not look for new files or checksums existing files. Cannot be used in conjunction with the --skip-missing flag. dfg -d /path/to/files -m","title":"Check for missing only"},{"location":"flags/#read-only-mode","text":"-ro Runs a scan without modifying the dfg.db or specified database file. If new files are found, they will not be written to the dfg.db file. Good option for testing archival data. dfg -d /path/to/file -ro","title":"Read only mode"},{"location":"flags/#debug","text":"-debug Shows debugging messages. Detailed error messages are printed. dfg -d /path/to/files/ -debug","title":"Debug"},{"location":"flags/#database-file-location","text":"-db You can specify your own db location with name of the database file. To do this, use the -db flag, example: dfg -db /path/to/db.sql -d /path/to/files/ Ensure you specify the database name, not just the directory path. More on database .","title":"Database file location"},{"location":"flags/#version","text":"-version Outputs version of the application","title":"Version"},{"location":"installation/","text":"Installation On Linux Deb Package On Debian based operating systems (such as Ubuntu, Linux Mint), download the deb package. On desktop versions, open package and click install package . Or, via command line: Download wget https://karlhunter.co.uk/defiant/dist/defiant-fg_linux_amd64_v1.deb Install (as root) dpkg --install dfg_amd64.deb Done. Manual Install There is a list of available OS downloads here . Manual Quick Install This will install amd64 version to the /usr/local/bin sudo wget https://karlhunter.co.uk/defiant/dist/defiant-fg_linux_amd64_v1/defiant-fg --directory-prefix=/usr/local/bin/ && sudo mv -f /usr/local/bin/defiant-fg /usr/local/bin/dfg && sudo chmod +x /usr/local/bin/dfg && dfg --version If you get the following output, then it work: DEFIANT File Guard (DEFIANT-FG) Version 1.X.X Date 20XX By Karl Hunter https://karlhunter.co.uk/defiant/ dfg@karlhunter.co.uk To scan a directory, add the -d flag followed by directory e.g. dfg -d /path/to/dir/ Test Test install. Run: dfg -version Done. To skip installer, and copy as a stand-alone executable, extract the contents and copy dfg.bin anywhere you desire. Make executable with command: chmod +x dfg.bin And run: ./dfg.bin Next Run","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#on-linux","text":"","title":"On Linux"},{"location":"installation/#deb-package","text":"On Debian based operating systems (such as Ubuntu, Linux Mint), download the deb package. On desktop versions, open package and click install package . Or, via command line: Download wget https://karlhunter.co.uk/defiant/dist/defiant-fg_linux_amd64_v1.deb Install (as root) dpkg --install dfg_amd64.deb Done.","title":"Deb Package"},{"location":"installation/#manual-install","text":"There is a list of available OS downloads here .","title":"Manual Install"},{"location":"installation/#manual-quick-install","text":"This will install amd64 version to the /usr/local/bin sudo wget https://karlhunter.co.uk/defiant/dist/defiant-fg_linux_amd64_v1/defiant-fg --directory-prefix=/usr/local/bin/ && sudo mv -f /usr/local/bin/defiant-fg /usr/local/bin/dfg && sudo chmod +x /usr/local/bin/dfg && dfg --version If you get the following output, then it work: DEFIANT File Guard (DEFIANT-FG) Version 1.X.X Date 20XX By Karl Hunter https://karlhunter.co.uk/defiant/ dfg@karlhunter.co.uk To scan a directory, add the -d flag followed by directory e.g. dfg -d /path/to/dir/","title":"Manual Quick Install"},{"location":"installation/#test","text":"Test install. Run: dfg -version Done. To skip installer, and copy as a stand-alone executable, extract the contents and copy dfg.bin anywhere you desire. Make executable with command: chmod +x dfg.bin And run: ./dfg.bin","title":"Test"},{"location":"installation/#next","text":"Run","title":"Next"},{"location":"log/","text":"Logging Enable With the -l flag you can enable log file writing. If supplied, your terminal window will no longer show outputs, but instead this will be output to a log file within the path of the directory. Useful for scripting. For example dfg -l -d /path/to/files Will result in a log file: /path/to/files/dfg.log The log file will append, which means every time you run the the application, new log entries will follow older entries. Location The default location of the log file, if you specify -l only, will be the directory of the scanned path; however, you can specify your own directory by using the -log flag. For example: dfg -l -log /var/log/pictures.log -d /mnt/usb/pictures/ Timestmp As log files append, you may want to create a new log file each time the program is run. To do this, add the date command to the -log flag: dfg -l -log /var/log/$(date +%F)_pictures.log -d /mnt/usb/pictures/ Output 2023-12-11.log More on date outputs.","title":"Logging"},{"location":"log/#logging","text":"","title":"Logging"},{"location":"log/#enable","text":"With the -l flag you can enable log file writing. If supplied, your terminal window will no longer show outputs, but instead this will be output to a log file within the path of the directory. Useful for scripting. For example dfg -l -d /path/to/files Will result in a log file: /path/to/files/dfg.log The log file will append, which means every time you run the the application, new log entries will follow older entries.","title":"Enable"},{"location":"log/#location","text":"The default location of the log file, if you specify -l only, will be the directory of the scanned path; however, you can specify your own directory by using the -log flag. For example: dfg -l -log /var/log/pictures.log -d /mnt/usb/pictures/","title":"Location"},{"location":"log/#timestmp","text":"As log files append, you may want to create a new log file each time the program is run. To do this, add the date command to the -log flag: dfg -l -log /var/log/$(date +%F)_pictures.log -d /mnt/usb/pictures/ Output 2023-12-11.log More on date outputs.","title":"Timestmp"},{"location":"release_notes_1/","text":"Release Notes 1.4.1 2025-04-12 Debug more with flag -debug Version 1.4 2025-04-09 Feature: read only flag added -ro Feature: scan for missing only flag added -m Fix: shows ID for failed files Built with Go 1.24.2 Version 1.3.3 2024-10-27 Doc fixes Built with Go 1.23.2 Changed SQLite engine to modernc.org/sqlite versio 1.33.1 Version 1.3.2 2024-04-14 Fixed compile bug not allowing access to database Upgraded to Go 1.22.2 to build application Changed SQLite engine to modernc.org/sqlite version 1.29.6 Version 1.3.1 2024-04-13 Block size flag --bs Minor code tidying SQLite3 upgraded to version 1.14.22 Using GoReleaser to build DFG - download links changed / minor adjustment to project layout on GitHub Version 1.3 2024-03-14 Database tools: allow removal of entry Database tools: find duplicates Removed \"info: scanning files\" from output Fixed typo Version 1.2.4 2024-03-07 Added skip missing file scan flag Removed pre-build binary and deb package for ARM processors. Version 1.2.3 2023-12-17 Colour coded terminal lines red for failed hashes orange for missing files blue for new files Version 1.2.2 2023-12-12 New flag: choose own database location New flag: choose own log file location New flag: show help Shows new files in log and in terminal Documentation update and error corrections Version 1.2.1 2023-11-28 Rebuild binary to work with older Linux Version 1.2 2023-11-28 Show only errors with -e flag In log more with -e still shows start / finish time Version 1.1 2023-11-25 Added log file flag Deb packager installer Version 1.0.1 2023-11-24 Minor typos fixes README typos fixed Fixed email address in about on application Built using earliest support Ubuntu LTS for compatibility Version 1.0 2023-11-23 Initial public release. Features Scan directory Hash files and store in database Check for missing files Dependency versions mattn sqlite3 driver 1.14.16","title":"Release Notes 1.x"},{"location":"release_notes_1/#release-notes","text":"","title":"Release Notes"},{"location":"release_notes_1/#141","text":"2025-04-12 Debug more with flag -debug","title":"1.4.1"},{"location":"release_notes_1/#version-14","text":"2025-04-09 Feature: read only flag added -ro Feature: scan for missing only flag added -m Fix: shows ID for failed files Built with Go 1.24.2","title":"Version 1.4"},{"location":"release_notes_1/#version-133","text":"2024-10-27 Doc fixes Built with Go 1.23.2 Changed SQLite engine to modernc.org/sqlite versio 1.33.1","title":"Version 1.3.3"},{"location":"release_notes_1/#version-132","text":"2024-04-14 Fixed compile bug not allowing access to database Upgraded to Go 1.22.2 to build application Changed SQLite engine to modernc.org/sqlite version 1.29.6","title":"Version 1.3.2"},{"location":"release_notes_1/#version-131","text":"2024-04-13 Block size flag --bs Minor code tidying SQLite3 upgraded to version 1.14.22 Using GoReleaser to build DFG - download links changed / minor adjustment to project layout on GitHub","title":"Version 1.3.1"},{"location":"release_notes_1/#version-13","text":"2024-03-14 Database tools: allow removal of entry Database tools: find duplicates Removed \"info: scanning files\" from output Fixed typo","title":"Version 1.3"},{"location":"release_notes_1/#version-124","text":"2024-03-07 Added skip missing file scan flag Removed pre-build binary and deb package for ARM processors.","title":"Version 1.2.4"},{"location":"release_notes_1/#version-123","text":"2023-12-17 Colour coded terminal lines red for failed hashes orange for missing files blue for new files","title":"Version 1.2.3"},{"location":"release_notes_1/#version-122","text":"2023-12-12 New flag: choose own database location New flag: choose own log file location New flag: show help Shows new files in log and in terminal Documentation update and error corrections","title":"Version 1.2.2"},{"location":"release_notes_1/#version-121","text":"2023-11-28 Rebuild binary to work with older Linux","title":"Version 1.2.1"},{"location":"release_notes_1/#version-12","text":"2023-11-28 Show only errors with -e flag In log more with -e still shows start / finish time","title":"Version 1.2"},{"location":"release_notes_1/#version-11","text":"2023-11-25 Added log file flag Deb packager installer","title":"Version 1.1"},{"location":"release_notes_1/#version-101","text":"2023-11-24 Minor typos fixes README typos fixed Fixed email address in about on application Built using earliest support Ubuntu LTS for compatibility","title":"Version 1.0.1"},{"location":"release_notes_1/#version-10","text":"2023-11-23 Initial public release. Features Scan directory Hash files and store in database Check for missing files Dependency versions mattn sqlite3 driver 1.14.16","title":"Version 1.0"},{"location":"requirements/","text":"Requirements I build the most recent long-term support of Ubuntu so ensure later operating system compatibility. Build on Ubuntu Server Ubuntu 20.04.6 LTS Tested on: Linux Mint 21.2 Ubuntu LTS 20.04.6 Build To build on your system, follow the build guide","title":"Requirements"},{"location":"requirements/#requirements","text":"I build the most recent long-term support of Ubuntu so ensure later operating system compatibility. Build on Ubuntu Server Ubuntu 20.04.6 LTS Tested on: Linux Mint 21.2 Ubuntu LTS 20.04.6","title":"Requirements"},{"location":"requirements/#build","text":"To build on your system, follow the build guide","title":"Build"},{"location":"run/","text":"Run To use FG, feed dfg with a directory to work with using the -d flag: dfg -d /path/to/dir/ If this is the first time you have scanned a directory you will be asked to confirm. This is to ensure you have not accidentally typed an incorrect address. To confirm, type y and press enter (to skip visit flags section). If a new database is created you will see: info: database file created The scan will begin. To cancel, hold down the Ctrl key and press C (Ctl+C). When the scan is complete you will get an confirmation: For errors that may occur, read the error page . What is happening? During the scan, FG will cycle through the directory and sub-directories. When it finds a file the following occurs: Is the object a file? (i.e. do not process a directory) Is this file in the database already? (does FG know about it, could be a new file) If yes, calculates the file's hash then compares against the database. If no match, reports to user: \"error: failed file hash\" If no, calculates the file's hash and adds to a queue to write to db later After this process has finished, FG will then cycle through the database to check for missing files. Is the file a file Is the file present If yes, continues with scan if no, reports to user \"error: file missing\" The scan will complete. If this is the first time you are running a scan, and have thousands of files, it may take a few hours to write to the database. Further scans on the same directory will work much faster. Scripting For more information about using dfg as part of a script, read this section .","title":"Run"},{"location":"run/#run","text":"To use FG, feed dfg with a directory to work with using the -d flag: dfg -d /path/to/dir/ If this is the first time you have scanned a directory you will be asked to confirm. This is to ensure you have not accidentally typed an incorrect address. To confirm, type y and press enter (to skip visit flags section). If a new database is created you will see: info: database file created The scan will begin. To cancel, hold down the Ctrl key and press C (Ctl+C). When the scan is complete you will get an confirmation: For errors that may occur, read the error page .","title":"Run"},{"location":"run/#what-is-happening","text":"During the scan, FG will cycle through the directory and sub-directories. When it finds a file the following occurs: Is the object a file? (i.e. do not process a directory) Is this file in the database already? (does FG know about it, could be a new file) If yes, calculates the file's hash then compares against the database. If no match, reports to user: \"error: failed file hash\" If no, calculates the file's hash and adds to a queue to write to db later After this process has finished, FG will then cycle through the database to check for missing files. Is the file a file Is the file present If yes, continues with scan if no, reports to user \"error: file missing\" The scan will complete. If this is the first time you are running a scan, and have thousands of files, it may take a few hours to write to the database. Further scans on the same directory will work much faster.","title":"What is happening?"},{"location":"run/#scripting","text":"For more information about using dfg as part of a script, read this section .","title":"Scripting"},{"location":"scripting/","text":"Scripting You can use dfg as part of a script. There are three important flags to achieve this. Add these flags: -e -s -l The -e flag suppresses info messages only allowing error messages. Add the -s flag skips all messages (including errors) on the terminal so to get anything back you need to specify -l to output the log file. If you want info messages in the log omitt the -s flag. How it looks together: dfg -s -e -l -d /path/to/files/ If you supply both the -l and -e flags together this will result in the following being written to the log file (need to know time scan started or finished). If there are any errors these will display between the start and end sections of the log. 2023/11/26 13:35:59 info: Scan started 2023/11/26 13:35:59 info: finished If you want to check if script was successful look for a 0 return: Any errors will return 1 , and success will return 0 .","title":"Scripting"},{"location":"scripting/#scripting","text":"You can use dfg as part of a script. There are three important flags to achieve this. Add these flags: -e -s -l The -e flag suppresses info messages only allowing error messages. Add the -s flag skips all messages (including errors) on the terminal so to get anything back you need to specify -l to output the log file. If you want info messages in the log omitt the -s flag. How it looks together: dfg -s -e -l -d /path/to/files/ If you supply both the -l and -e flags together this will result in the following being written to the log file (need to know time scan started or finished). If there are any errors these will display between the start and end sections of the log. 2023/11/26 13:35:59 info: Scan started 2023/11/26 13:35:59 info: finished If you want to check if script was successful look for a 0 return: Any errors will return 1 , and success will return 0 .","title":"Scripting"}]}